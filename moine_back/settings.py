"""
Django settings for moine_back project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
import getconf
from pathlib import Path

# local config
config = getconf.ConfigGetter(
    "myproj", ["local_settings.conf", "/etc/telescoop/moine/settings.ini"]
)

BASE_DIR = Path(__file__).resolve().parent.parent

IS_LOCAL_DEV = bool(os.environ.get("TELESCOOP_DEV"))
DEBUG = IS_LOCAL_DEV

if IS_LOCAL_DEV:
    SECRET_KEY = "django-insecure-zdvs0+i17^0*8w0nd%0mtoa69)%#%cp37=8t2^2s0ung)zp(51"
    ALLOWED_HOSTS = ["*"]
else:
    SECRET_KEY = config.getstr("security.secret_key")
    ALLOWED_HOSTS = config.getlist("security.allowed_hosts")

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "hijack",
    "hijack.contrib.admin",
    "telescoop_auth",
    "main",
    "rest_framework",
]
if IS_LOCAL_DEV:
    INSTALLED_APPS.append("debug_toolbar")
else:
    # this is necessary for text search
    INSTALLED_APPS.append("django.contrib.postgres")

if IS_LOCAL_DEV:
    INSTALLED_APPS.append("corsheaders")

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "rollbar.contrib.django.middleware.RollbarNotifierMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "hijack.middleware.HijackUserMiddleware",
]

ROOT_URLCONF = "moine_back.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "moine_back.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

if IS_LOCAL_DEV:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": config.getstr("database.name"),
            "USER": config.getstr("database.user"),
            "password": config.getstr("database.password"),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

STATIC_URL = "static/"
MEDIA_URL = "media/"
if IS_LOCAL_DEV:
    STATIC_ROOT = BASE_DIR / "collected_static"
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")
else:
    STATIC_ROOT = config.getstr("staticfiles.static_root")

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# mail and production erros
if not IS_LOCAL_DEV:
    ROLLBAR = {
        "access_token": "c4ebf44512b4479fb018ee413ac08d2a",
        "environment": "development" if DEBUG else "production",
        "root": BASE_DIR,
    }
    import rollbar

    rollbar.init(**ROLLBAR)

    ANYMAIL = {
        "MAILGUN_API_KEY": config.getstr("mail.api_key"),
        "MAILGUN_SENDER_DOMAIN": "mail.telescoop.fr",
    }
    EMAIL_BACKEND = "anymail.backends.mailgun.EmailBackend"
    DEFAULT_FROM_EMAIL = "no-reply@telescoop.fr"
    SERVER_EMAIL = "no-reply@telescoop.fr"

# CORS
if IS_LOCAL_DEV:
    CORS_ALLOWED_ORIGINS = ["http://localhost:3000"]
    CORS_ALLOW_CREDENTIALS = True
    CSRF_TRUSTED_ORIGINS = ["http://localhost:3000"]

# django-hijack
HIJACK_ALLOW_GET_REQUESTS = True

AUTH_USER_MODEL = "main.User"

# camel case for DRF
REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": (
        "djangorestframework_camel_case.render.CamelCaseJSONRenderer",
        "djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer",
        # below renderer can be useful to debug queries with django-debug-toolbar
        # "main.renderer.RendererNoForm",
    ),
    "DEFAULT_PARSER_CLASSES": (
        "djangorestframework_camel_case.parser.CamelCaseFormParser",
        "djangorestframework_camel_case.parser.CamelCaseMultiPartParser",
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
    ),
}

# File storage
if not IS_LOCAL_DEV:
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    AWS_S3_ACCESS_KEY_ID = config.getstr("external_file_storage.access")
    AWS_S3_SECRET_ACCESS_KEY = config.getstr("external_file_storage.secret")
    AWS_S3_ENDPOINT_URL = config.getstr("external_file_storage.endpoint_url")
    AWS_STORAGE_BUCKET_NAME = config.getstr("external_file_storage.bucket")
    AWS_S3_REGION_NAME = "paris"

# django debug toolbar
if IS_LOCAL_DEV:
    INTERNAL_IPS = ["127.0.0.1", "localhost"]
