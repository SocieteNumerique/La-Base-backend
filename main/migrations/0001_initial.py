# Generated by Django 4.0.2 on 2022-06-08 16:36

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(default='', max_length=150)),
                ('last_name', models.CharField(default='', max_length=150)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('activation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Base',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=100, verbose_name='titre')),
                ('is_public', models.BooleanField(default=False, verbose_name='La base est publique')),
                ('admins', models.ManyToManyField(blank=True, related_name='admins', to=settings.AUTH_USER_MODEL, verbose_name='administrateurs')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContentBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=50, null=True)),
                ('annotation', models.TextField(blank=True, null=True)),
                ('is_draft', models.BooleanField(default=True)),
                ('nb_col', models.IntegerField(default=2)),
                ('order', models.BigIntegerField()),
            ],
            options={
                'verbose_name': 'Bloc de contenu',
                'verbose_name_plural': 'Blocs de contenu',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=100)),
                ('state', models.CharField(choices=[('public', 'public'), ('private', 'Privé'), ('restricted', 'Restreint'), ('draft', 'Brouillon')], default='draft', max_length=10)),
                ('cover_image', models.FileField(blank=True, null=True, upload_to='')),
                ('resource_created_on', models.DateField(default=datetime.date.today)),
                ('producer_state', models.CharField(choices=[['me', 'celui qui ajouté la ressource'], ['know', 'producteur connu'], ['dont-know', 'producteur inconnu']], default='me', max_length=10)),
                ('is_linked_to_a_territory', models.BooleanField(blank=True, null=True)),
                ('access_requires_user_account', models.BooleanField(blank=True, null=True)),
                ('is_draft', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=False)),
                ('description', models.CharField(blank=True, max_length=560, null=True)),
                ('zip_code', models.IntegerField(blank=True, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='')),
                ('label_state', models.CharField(blank=True, choices=[('', 'Non demandé'), ('pending', 'En cours'), ('refused', 'Refusé'), ('accepted', 'Accepté')], default='', max_length=10)),
                ('label_details', models.TextField(blank=True, null=True)),
                ('is_grid_view_enabled', models.BooleanField(default=False)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator', to=settings.AUTH_USER_MODEL)),
                ('creator_bases', models.ManyToManyField(related_name='created_resources', to='main.Base', verbose_name='Bases qui ont créé la ressource')),
            ],
            options={
                'verbose_name': 'Ressource',
            },
        ),
        migrations.CreateModel(
            name='FileContent',
            fields=[
                ('contentblock_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.contentblock')),
                ('file', models.FileField(upload_to='')),
                ('with_preview', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Contenu : Fichier importé',
                'verbose_name_plural': 'Contenus : Fichiers importés',
            },
            bases=('main.contentblock',),
        ),
        migrations.CreateModel(
            name='LinkContent',
            fields=[
                ('contentblock_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.contentblock')),
                ('link', models.URLField(blank=True, null=True)),
                ('with_preview', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Contenu : Lien externe',
                'verbose_name_plural': 'Contenus : Liens externes',
            },
            bases=('main.contentblock',),
        ),
        migrations.CreateModel(
            name='TextContent',
            fields=[
                ('contentblock_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.contentblock')),
                ('text', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Contenu : Texte',
                'verbose_name_plural': 'Contenus : Textes',
            },
            bases=('main.contentblock',),
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, verbose_name='nom du groupe')),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TagCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=40, verbose_name='nom')),
                ('slug', models.CharField(help_text='Convention : familleDeLaCatégorie + _ + ordreÀDeuxChiffresDansLaFamille + slugDeLaCatégorie, ex indexation_03format', max_length=40, verbose_name='Slug - à ne pas modifier')),
                ('description', models.CharField(blank=True, max_length=100, null=True, verbose_name='description')),
                ('required_to_be_public', models.BooleanField(default=False, verbose_name='remplissage obligatoire pour passer en public')),
                ('maximum_tag_count', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='nombre maximum de tags liés')),
                ('accepts_free_tags', models.BooleanField(default=True, verbose_name='accepte des tags libres')),
                ('relates_to', models.CharField(blank=True, choices=[('Resource', 'Ressources'), ('User', 'Utilisateurs'), ('Base', 'Bases')], max_length=10, null=True, verbose_name='lié aux')),
                ('is_draft', models.BooleanField(default=False, help_text="Une catégorie en brouillon est ignorée par l'appli", verbose_name='est un brouillon')),
                ('base', models.ForeignKey(blank=True, help_text="si une catégorie de tag n'est liée à aucune base, elle est globale", null=True, on_delete=django.db.models.deletion.CASCADE, to='main.base', verbose_name='lié à la base')),
            ],
            options={
                'verbose_name': 'Catégorie de tags',
                'verbose_name_plural': 'Catégories de tags',
                'ordering': ('slug',),
                'unique_together': {('name', 'base')},
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=60, verbose_name='nom')),
                ('is_free', models.BooleanField(default=False, verbose_name='est un tag libre')),
                ('is_draft', models.BooleanField(default=False, verbose_name='est un brouillon')),
                ('definition', models.TextField(blank=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='main.tagcategory')),
                ('parent_tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='main.tag', verbose_name='parent')),
            ],
            options={
                'ordering': ('name',),
                'unique_together': {('name', 'category')},
            },
            managers=[
                ('default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ResourceUserGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('can_write', models.BooleanField(default=False, verbose_name='accès en écriture')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_user_groups', to='main.usergroup')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_user_groups', to='main.resource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='resource',
            name='groups',
            field=models.ManyToManyField(blank=True, through='main.ResourceUserGroup', to='main.UserGroup'),
        ),
        migrations.AddField(
            model_name='resource',
            name='internal_producers',
            field=models.ManyToManyField(blank=True, related_name='internal_producers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='resource',
            name='linked_resources',
            field=models.ManyToManyField(blank=True, to='main.Resource'),
        ),
        migrations.AddField(
            model_name='resource',
            name='root_base',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='resources', to='main.base', verbose_name='Base à laquelle la ressource est rattachée'),
        ),
        migrations.AddField(
            model_name='resource',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='ressources', to='main.Tag'),
        ),
        migrations.CreateModel(
            name='ExternalProducer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('email_contact', models.EmailField(max_length=254)),
                ('validated', models.BooleanField(default=False)),
                ('occupation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.tag')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='external_producers', to='main.resource')),
            ],
            options={
                'verbose_name': 'Producteur sans compte sur la plateforme',
                'verbose_name_plural': 'Producteurs sans compte sur la plateforme',
            },
        ),
        migrations.CreateModel(
            name='ContentSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=25, null=True)),
                ('is_foldable', models.BooleanField(default=False)),
                ('order', models.BigIntegerField()),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='main.resource')),
            ],
            options={
                'verbose_name': 'Dossier de contenu',
                'verbose_name_plural': 'Dossiers de contenu',
                'ordering': ['order'],
                'unique_together': {('resource', 'order')},
            },
        ),
        migrations.AddField(
            model_name='contentblock',
            name='resource',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contents', to='main.resource'),
        ),
        migrations.AddField(
            model_name='contentblock',
            name='section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contents', to='main.contentsection'),
        ),
        migrations.CreateModel(
            name='LinkedResourceContent',
            fields=[
                ('contentblock_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.contentblock')),
                ('linked_resource', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.resource')),
            ],
            options={
                'verbose_name': 'Contenu : Ressource liée',
                'verbose_name_plural': 'Contenus : Ressources liées',
            },
            bases=('main.contentblock',),
        ),
        migrations.AlterUniqueTogether(
            name='contentblock',
            unique_together={('order', 'section')},
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=25, verbose_name='nom')),
                ('base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections', to='main.base')),
                ('resources', models.ManyToManyField(blank=True, related_name='collections', to='main.Resource')),
            ],
            options={
                'ordering': ('name',),
                'unique_together': {('name', 'base')},
            },
        ),
    ]
